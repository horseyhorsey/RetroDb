// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RetroDb.DataSqlite;

namespace RetroDb.DataSqlite.Migrations
{
    [DbContext(typeof(RetroDbContext))]
    partial class RetroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("RetroDb.Data.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("RetroDb.Data.Emulator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Executable")
                        .IsRequired();

                    b.Property<string>("Extensions");

                    b.Property<string>("GamePaths");

                    b.Property<int?>("GamingSystemId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("GamingSystemId");

                    b.HasIndex("Name", "Version", "Executable")
                        .IsUnique();

                    b.ToTable("Emulators");
                });

            modelBuilder.Entity("RetroDb.Data.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("DeveloperId");

                    b.Property<int?>("EmulatorId");

                    b.Property<bool>("Enabled");

                    b.Property<bool>("Favourite");

                    b.Property<string>("FileName");

                    b.Property<int>("GameControlType");

                    b.Property<int?>("GenreId");

                    b.Property<DateTime?>("LastPlayed");

                    b.Property<DateTime?>("LastUpdated");

                    b.Property<int?>("ManufacturerId");

                    b.Property<bool?>("PlayLater");

                    b.Property<int?>("Players");

                    b.Property<string>("Rating");

                    b.Property<string>("Region");

                    b.Property<string>("ShortDescription");

                    b.Property<int>("SystemId");

                    b.Property<TimeSpan?>("TimePlayed");

                    b.Property<int?>("TimesPlayed");

                    b.Property<string>("Title");

                    b.Property<int>("UserRating")
                        .HasMaxLength(10);

                    b.Property<int?>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("EmulatorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SystemId");

                    b.HasIndex("Title", "FileName", "Description", "SystemId", "ManufacturerId", "GenreId", "Year")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("RetroDb.Data.GameSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastLaunched");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SystemType");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GamingSystems");
                });

            modelBuilder.Entity("RetroDb.Data.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("RetroDb.Data.HiScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<long>("Score");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("HiScores");
                });

            modelBuilder.Entity("RetroDb.Data.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("RetroDb.Data.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Initials")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("RetroDb.Data.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("RetroDb.Data.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Params");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("RetroDb.Data.Emulator", b =>
                {
                    b.HasOne("RetroDb.Data.GameSystem", "GamingSystem")
                        .WithMany("Emulators")
                        .HasForeignKey("GamingSystemId");
                });

            modelBuilder.Entity("RetroDb.Data.Game", b =>
                {
                    b.HasOne("RetroDb.Data.Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId");

                    b.HasOne("RetroDb.Data.Emulator", "Emulator")
                        .WithMany()
                        .HasForeignKey("EmulatorId");

                    b.HasOne("RetroDb.Data.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("RetroDb.Data.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("RetroDb.Data.GameSystem", "System")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RetroDb.Data.HiScore", b =>
                {
                    b.HasOne("RetroDb.Data.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RetroDb.Data.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
